<idea-plugin>
    <id>org.tonybaloney.security.pycharm-security</id>
    <name>Python Security</name>
    <vendor email="anthonyshaw@apache.org" url="https://github.com/tonybaloney/pycharm-security/">Anthony Shaw</vendor>

    <description><![CDATA[
    Analyzes potential security flaws in your Python code and suggests fixes. Designed to find common security issues in Python code.<br>
    Reports on installed packages and any known security reports. <br/>

    Also available for your CI/CD as a GitHub Action <a href="https://github.com/marketplace/actions/pycharm-python-security-scanner">on the GitHub marketplace</a>.

    <h2>Features</h2>
    <ul>
     <li>Over 40 builtin code checks giving your contextual security warnings in your code</li>
     <li>Misconfiguration warnings for Django and Flask web frameworks</li>
     <li>Cross-Site-Scripting detection for both Jinja2 and Mako templating engines</li>
     <li>SQL Injection detection in all Python string formats</li>
     <li>Automatic reporting of known vulnerabilities and CVEs in your installed Python Packages within PyCharm</li>
     <li>Detection of security flaws and misconfiguration in 3rd party libraries like Jinja2, Paramiko and Mako</li>
     <li>Can be used to scan large code bases with inspection profiles</li>
     <li>Configurable alert levels and warning suppression by file, line, or project</li>
     <li>Scan code in your CI/CD using Docker</li>
    </ul>
    ]]></description>
    <idea-version since-build="193.3210" until-build="193.*" />
    
    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.python</depends>

    <extensions defaultExtensionNs="com.intellij">
        <backgroundPostStartupActivity implementation="security.packaging.PythonPackageVulnerabilityStartupTask"/>
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="YML100: Use of unsafe yaml load." shortName="PyyamlLoadInspection" implementationClass="security.validators.PyyamlLoadInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG100: Use of Django debug mode." shortName="DjangoDebugModeSettingsInspection" implementationClass="security.validators.DjangoDebugModeSettingsInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG200, DJG201: Missing Django Middleware." shortName="DjangoMiddlewareInspection" implementationClass="security.validators.DjangoMiddlewareInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG101: Using quoted, parametrized literal will bypass Django SQL Injection protection." shortName="DjangoRawSqlInspection" implementationClass="security.validators.DjangoRawSqlInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="DJG102: Using safe strings bypasses the Django XSS protection." shortName="DjangoSafeStringInspection" implementationClass="security.validators.DjangoSafeStringInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG103: Using quoted, parametrized literal in extra() arguments will bypass Django SQL Injection protection." shortName="DjangoExtraSqlInspection" implementationClass="security.validators.DjangoExtraSqlInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG104: Instantiating Django Func expressions with a dangerous template." shortName="DjangoExpressionInspection" implementationClass="security.validators.DjangoExpressionInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="FLK100: Use of Flask debug mode." shortName="FlaskDebugModeInspection" implementationClass="security.validators.FlaskDebugModeInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="RQ101: Setting verify=False when using httpx." shortName="HttpxNoVerifyInspection" implementationClass="security.validators.HttpxNoVerifyInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="RQ100: Setting verify=False when using requests." shortName="RequestsNoVerifyInspection" implementationClass="security.validators.RequestsNoVerifyInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PR100: Running subprocesses with shell mode." shortName="SubprocessShellModeInspection" implementationClass="security.validators.SubprocessShellModeInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="TMP100: Use of unsafe tempfile.mktemp." shortName="TempfileMktempInspection" implementationClass="security.validators.TempfileMktempInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="TMP101: Reading or writing temporary files with a hardcoded path." shortName="HardcodedTempFileInspection" implementationClass="security.validators.HardcodedTempFileInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="HL100, HL101: Insecure hashing algorithms." shortName="InsecureHashInspection" implementationClass="security.validators.InsecureHashInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PW100: Comparing secrets and passwords insecurely." shortName="TimingAttackInspection" implementationClass="security.validators.TimingAttackInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="JJ100: Use of unsanitized Jinja2 Templates." shortName="JinjaAutoinspectInspection" implementationClass="security.validators.JinjaAutoinspectInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PW101: Hardcoded passwords and secrets." shortName="HardcodedPasswordInspection" implementationClass="security.validators.HardcodedPasswordInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="EX100: Use of builtin exec() function." shortName="BuiltinExecInspection" implementationClass="security.validators.BuiltinExecInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="MK100: Use of unsanitized Mako Templates." shortName="MakoTemplateInspection" implementationClass="security.validators.MakoTemplateInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="SQL100: Possible SQL injection." shortName="SqlInjectionInspection" implementationClass="security.validators.SqlInjectionInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="AST100: Use of asserts in non-test files." shortName="AssertInspection" implementationClass="security.validators.AssertInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="TRY100: Except block only containing a pass statement." shortName="TryExceptPassInspection" implementationClass="security.validators.TryExceptPassInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="TRY101: Except block only containing a continue statement." shortName="TryExceptContinueInspection" implementationClass="security.validators.TryExceptContinueInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PAR100: Paramiko set to automatically trust the host key." shortName="ParamikoHostkeyBypassInspection" implementationClass="security.validators.ParamikoHostkeyBypassInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PAR101: Possible shell injection with Paramiko." shortName="ParamikoExecCommandInspection" implementationClass="security.validators.ParamikoExecCommandInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="NET100: Possible service binding to all network interfaces." shortName="BindAllInterfacesInspection" implementationClass="security.validators.BindAllInterfacesInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="OS100: Call to os.chmod setting permission values." shortName="OsChmodInspection" implementationClass="security.validators.OsChmodInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PIC100: Loading serialized data with the pickle module." shortName="PickleLoadInspection" implementationClass="security.validators.PickleLoadInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="XML100: Usage of xml modules in the Python standard library." shortName="StandardLibraryXmlInspection" implementationClass="security.validators.StandardLibraryXmlInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="XML200: Using SimpleXMLRPCServer with 'allow_dotted_names'." shortName="XmlRpcServerDottedNamesInspection" implementationClass="security.validators.XmlRpcServerDottedNamesInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="SSL100, SSL101: Using 'ssl.wrap_socket()' with insecure SSL version." shortName="SslWrapSocketInspection" implementationClass="security.validators.SslWrapSocketInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="STR100: Calling format with insecure string." shortName="StrFormatInspection" implementationClass="security.validators.StrFormatInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="SH100: Potential shell injection with unescaped input." shortName="StandardShellInjectionInspection" implementationClass="security.validators.StandardShellInjectionInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" level="WEAK WARNING" displayName="SH101: Potentially risky call to spawned process." shortName="SpawnShellInjectionInspection" implementationClass="security.validators.SpawnShellInjectionInspection" />

        <applicationConfigurable displayName="Python Security" instance="security.settings.SecuritySettingsConfigurable" id="org.tonybaloney.security.pycharm-security.settings.SecuritySettingsConfigurable" groupId="tools"/>
        <applicationService serviceImplementation="security.settings.SecuritySettings" id="org.tonybaloney.security.pycharm-security.settings.SecuritySettings" />
    </extensions>
    <extensions defaultExtensionNs="Pythonid">
    </extensions>
    <actions>
        <action id="Security.CheckSafetyDB" class="security.packaging.PackageCheckerAction" text="Check Python Package Security" description="Check the installed Python packages for any known vulnerabilities." >
            <add-to-group group-id="ToolsMenu" anchor="last"/>
        </action>
    </actions>
</idea-plugin>